<?php


namespace Zijinghua\Zbasement\Http\Models;


use GuzzleHttp\Client;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\RequestOptions;
use Illuminate\Pagination\LengthAwarePaginator;
use Illuminate\Support\Collection;
use Tymon\JWTAuth\Contracts\JWTSubject;
use Zijinghua\Zbasement\Http\Models\BaseModel;

class ResfulModel extends BaseModel implements JWTSubject
{
//    protected $data;
    protected $client;

    protected function createRestfulClient(){
        if(!$this->client){
            $this->client = new Client(['headers' => [ 'Content-Type' => 'application/json' ,'Accept'=> 'application/json']]);
//            application/x-www-form-urlencoded
        }
    }

    public function __construct(array $attributes = [])
    {
        parent::__construct($attributes);
        $this->createRestfulClient();
    }

    public function connect($action,$url,$parameters){

        $parameters=['body' => json_encode($parameters)];

        try {
            $response = $this->client->$action($url, $parameters);
            $content=$response->getBody();
        }
        catch (RequestException  $e) {
            $response = $e->getResponse();
            $content = $response->getBody()->getContents();
        }
        //还需要处理网络故障异常


        $json=json_decode($content);
        if(isset($json->status)&&$json->status){
            return $json->data;
        }
    }
    public function connectWithAllResponse($action,$url,$parameters){

        $parameters=['body' => json_encode($parameters)];

        try {
            $response = $this->client->$action($url, $parameters);
            $content=$response->getBody();
        }
        catch (RequestException  $e) {
            $response = $e->getResponse();
            $content = $response->getBody()->getContents();
        }
        //还需要处理网络故障异常


        $json=json_decode($content);

            return $json;

    }
    public function fill($data){
        foreach ($data as $key=>$value){
            $this->setAttribute($key,$value);
        }
    }
    public function store($data){
        foreach ($data as $key=>$value){
            $this->setAttribute($key,$value);
        }
    }

    public function fields($fields)
    {
        //组装成
        //{
        //    "search":
        //    [
        //        "wechat_id",
        //        "username"
        //    ]
        //}
        $parameters['search']=$fields;
        $host=getConfigValue('zbasement.api.usercenter.host');

        $fetchUri=getConfigValue('zbasement.api.usercenter.api.fields.uri');
        $action=getConfigValue('zbasement.api.usercenter.api.fields.action');
        $fetchUri=$host.$fetchUri;
//        $parameters=$data;
        $data=$this->connect($action,$fetchUri,$parameters);
//        if(isset($data)){
//            $this->fill($data[0]);
            return $data[0];
//        }

    }

    public function index($parameters,$action,$url){
        $response=$this->connectWithAllResponse($action,$url,$parameters);
        $total=$response->meta->total;
        $perPage=@$parameters['perPage'];
        $perPage=perPage($perPage);
        $currentPage=isset($parameters['page'])?$parameters['page']:0;
        $collection=new \Illuminate\Database\Eloquent\Collection();
        $class=get_called_class();
        foreach ($response->data as $key=>$item){

            $collection->push(new $class(objectToArray($item)));
        }
        return new LengthAwarePaginator($collection,$total,$perPage, $currentPage);

    }

    public function getKey()
    {
        return $this->id;
//        return parent::getKey(); // TODO: Change the autogenerated stub
    }

    /**
     * Get the identifier that will be stored in the subject claim of the JWT.
     *
     * @return mixed
     */
    public function getJWTIdentifier()
    {
        return $this->getKey();
    }

    /**
     * Return a key value array, containing any custom claims to be added to the JWT.
     *
     * @return array
     */
    public function getJWTCustomClaims()
    {
        return [];
    }

}