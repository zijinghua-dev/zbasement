<?php


namespace Zijinghua\Zbasement\Http\Models;


use GuzzleHttp\Client;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\RequestOptions;
use Illuminate\Support\Collection;
use Tymon\JWTAuth\Contracts\JWTSubject;
use Zijinghua\Zbasement\Http\Models\BaseModel;

class ResfulModel extends BaseModel implements JWTSubject
{
//    protected $data;
    protected $client;

    protected function createRestfulClient(){
        if(!$this->client){
            $this->client = new Client(['headers' => [ 'Content-Type' => 'application/json' ,'Accept'=> 'application/json']]);
//            application/x-www-form-urlencoded
        }
    }

    public function __construct(array $attributes = [])
    {
        parent::__construct($attributes);
        $this->createRestfulClient();
    }

    public function connect($action,$url,$parameters){

        $parameters=['body' => json_encode($parameters)];

        try {
            $response = $this->client->$action($url, $parameters);
            $content=$response->getBody();
        }
        catch (RequestException  $e) {
            $response = $e->getResponse();
            $content = $response->getBody()->getContents();
        }
        //还需要处理网络故障异常


        $json=json_decode($content);
        if(isset($json->status)&&$json->status){
            return $json->data;
        }
    }
    public function fill($data){
        foreach ($data as $key=>$value){
            $this->setAttribute($key,$value);
        }
    }
    public function store($data){
        foreach ($data as $key=>$value){
            $this->setAttribute($key,$value);
        }
    }
//    public function getUuidAttribute()
//    {
//        if(isset($this->data)){
//            return $this->data[0]->uuid;
//        }
//
//    }

    public function getKey()
    {
        return $this->uuid;
//        return parent::getKey(); // TODO: Change the autogenerated stub
    }

    /**
     * Get the identifier that will be stored in the subject claim of the JWT.
     *
     * @return mixed
     */
    public function getJWTIdentifier()
    {
        return $this->getKey();
    }

    /**
     * Return a key value array, containing any custom claims to be added to the JWT.
     *
     * @return array
     */
    public function getJWTCustomClaims()
    {
        return [];
    }

}